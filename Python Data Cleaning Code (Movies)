# Performed on jupyter notebook.

import pandas as pd
import numpy as np
import re

data = pd.read_csv("C:/Users/Siya/Documents/Data Science/Projects/Projects completed/Python/Data Cleaning/movies.csv")
df = data.copy()

df.shape
df.head()


# Standardize column names such that they are all in small caps.
df.columns = df.columns.str.strip().str.lower()


# Check for and drop duplicates.
sum(df.duplicated())
df = df.drop_duplicates()


# Check for null values.
df.isnull().sum()

# Check what percentage of data per column is missing.
for col in df.columns:
    pct_missing = np.mean(df[col].isnull())
    print('{} - {}%'.format(col, round(pct_missing*100,2)))

# Take a closer look at missing values by defining a function to print only the rows with missing values.
def nulls(x):
    return df[x.isnull().any(axis = 1)]

nulls(df).head()
nulls(df).tail()
    

###### From index 4 it is seen that rating has a missing value, as does 'votes', 'runtime' and 'gross' columns. The last five entries show a pattern with regards to missing values in that when a movie
###### has no rating more often than not it has no votes, gross revenue or run time information. These features would be important in creating a predictive model to determine the likelihood of getting  
###### a good rating for one's movie or predicting the gross revenue. However, since this project is solely for cleaning purposes, we will delete rows with missing values.

# Delete rows with missing values.
df = df.dropna()


# Check the data types for the columns.
df.dtypes

# Create a function to convert the 'movies' and 'one-line' column data types to string.
def change_column_type(df, column_names, data_type):
    for column in column_names:
        df[column] = df[column].astype(data_type)

column_names = ['movies', 'one-line']
data_type = 'string'

change_column_type(df, column_names, data_type)


# Remove braces from the 'year' column and split 'year' column into two columns.
df['year'] = df['year'].str.replace('(', '').str.replace(')', '')
df[['year', 'instalment']] = df['year'].str.split(' ', n=1, expand=True)

# Convert None values in 'instalment' column to zeros.
convert = lambda i : i or 0
df['instalment'] = [convert(i) for i in df['instalment']]

# The years of release are split between the 'year_start' column and the 'instalment' column so we need to place all of them in one column.
# Create an empty list 'x' to house the years of release of the movies.
x = [i if j == 0 else j for i, j in zip(df['year'], df['instalment'])]

# Place the contents of the newly created list x into a pandas Series using the index the data frame df as year_series' index. 
year_series = pd.Series(x[0:460], name = 'year_released', index = df.index.copy())

# Concatenate the pandas Series y and the dataframe df.
df = pd.concat([df, year_series.to_frame()], axis = 1)

# Delete 'year', 'year_start' and 'instalment' columns.
df.drop(columns = ['instalment'], inplace = True)


# Change data type of 'year_released' column.
df['year_released'] = df['year_released'].apply(np.int64)


# Convert the 'votes' column data type to integer.
df['votes'] = df['votes'].str.replace(',', '')
df['votes'] = df['votes'].apply(np.int64)


# Change the 'gross' column data type to integer.
# Check the 'gross' column to confirm that only the dollar is used as currency.
df['gross'].unique()

# Remove the 'M' from each entry, change 'gross' column data type to float, and change the 'gross' column name to 'gross_in_millions_of_$' to indicate currency and units of the gross. 
df['gross'] = df['gross'].str.replace('$', '').str.replace('M', '')
df['gross'] = df['gross'].apply(np.float)
df = df.rename(columns={'gross': 'gross_in_millions_of_$'})


# Check and clean contents of the 'movies', 'genre' and 'stars' columns.
df['movies'].unique()
df['genre'].unique()
df['stars'].unique()


# Handle categorical data


# Take a look at the contents of the 'genre' column.
df['genre'].head()
df['genre'].unique()

# The 'genre' column consists of up to three genres per movie, create columns to place each of the genres. 
df['genre'] = df['genre'].str.replace('\n', '').str.strip()
genres = df[['genre']]

# Create a new dataframe, new_genres, by spliting the 'genre' column such that each new column formed houses a spcific genre that the movie falls into. 
genres[['genre1', 'genre2', 'genre3']] = genres['genre'].str.split(',', expand = True)
genres = genres.drop(columns = 'genre')

# Code categorical data using the fit_transform method.
def encode_cat_col(dataframe, *column_names):
    convert = lambda i: i or ''  # Convert cell with None type to empty cell

    x = pd.DataFrame()  # Create an empty dataframe

    for col in column_names:
        dataframe[col] = [convert(i) for i in dataframe[col]]
        x[col] = dataframe[col]  # Assign the column to the dataframe x

    # Create a new dataframe using fit_transform on x columns
    from sklearn.preprocessing import LabelEncoder
    le = LabelEncoder()
    encoded_cat_col_df = x.apply(le.fit_transform)

    # Set the column names of the new dataframe as columns names of DatarFame x 
    encoded_cat_col_df.columns = x.columns

    return encoded_cat_col_df

df_to_encode = genres  
column_names = genres.columns  
encoded_cat_col_df = encode_cat_col(df_to_encode, *column_names)  

# Change column names to prevent column overlap when joining all the dataframes
encoded_cat_col_df = encoded_cat_col_df.rename(columns = {'genre1': 'encoded_gen1', 'genre2': 'encoded_gen2', 'genre3': 'encoded_gen3'}) 

# Concatenate the 'genres' and the dataframe with encoded genre data to dataframe df
df = pd.concat([df.drop(columns = 'genre'), genres.rename(columns = {'genre': 'genres'}), encoded_cat_col_df], axis = 1)

# Create dictionary to store the genre and the corresponding encoded genre data
genres_dict = dict(zip(genres, encoded_cat_col_df))

    
# Take look at the contents of the 'stars' column. 
df['stars']
df['stars'].unique()
df['stars'][77]

###### The 'stars' column consists of the names of the starts as well as the director. Split these and place them
###### in their respective columns

# Clean the 'stars' columns
df['stars'] = df['stars'].str.replace('Stars:', '').str.replace('Director:', '').str.replace('\n', '').str.strip()

# Split the 'stars' column into 'director' and 'stars' column.
df[['director', 'stars']] = df['stars'].str.split('|', n = 1, expand = True)

# Create an empty dataframe to store the actor names.
actors = pd.DataFrame()
actors[['actor1', 'actor2', 'actor3', 'actor4']] = df['stars'].str.split(',', expand = True)

df_to_encode = actors  
column_names = actors.columns  
encoded_cat_col_df = encode_cat_col(df_to_encode, *column_names)  

# Change column names to prevent column overlap when joining all the dataframes
encoded_cat_col_df = encoded_cat_col_df.rename(columns = {'actor1': 'encoded_act1', 'actor2': 'encoded_act2', 'actor3': 'encoded_act3', 'actor4': 'encoded_act4'}) 

# Join the 'actors' and the dataframe with encoded actor data to the original dataframe
df = pd.concat([df.drop(columns = 'stars'), actors, encoded_cat_col_df], axis = 1)

# Create dictionary to store the actor and the corresponding encoded data
actors_dict = dict(zip(actors, encoded_cat_col_df))


# Encode data in 'director' director column and concaate the encoded data to dataframe df. 
director_cat = pd.DataFrame()
director_cat = df[['director']]
df_to_encode = director_cat 
column_names = director_cat.columns  
encoded_cat_col_df = encode_cat_col(df_to_encode, *column_names)  

df = pd.concat([df.drop(columns = 'director'), director_cat.rename(columns = {'director_cat': 'director'}), encoded_cat_col_df.rename(columns = {'director': 'encoded_dir'})], axis = 1)

pd.set_option('display.max_columns', None)
df.head()

# Data cleaning complete.
