import pandas as pd
import numpy as np
import re

data = pd.read_csv("C:/Users/Siya/Documents/Data Science/Projects/Projects completed/Python/Data Cleaning/movies.csv")
df = data.copy()
#df.head()

df.shape

# Check for duplicates.

sum(df.duplicated())

# Drop duplicates.

df = df.drop_duplicates()
df.shape

###### 431 Rows were duplicates and deleted and now we're left with 9568 entries. 

# Check for null values.

for col in df.columns:
    pct_missing = np.mean(df[col].isnull())
    print('{} - {}%'.format(col, round(pct_missing*100)))
    
# Create a function to check which rows have null values.

def nans(df):
    return df[df.isnull().any(axis = 1)]

nulls = nans(df)

nulls.head(5)

###### We see in index 4 that rating has a missing value, as 'votes', 'runtime' and 'gross' columns. We check the last five entries to see if this is a pattern, whereby a missing value in 'rating' column is associated with missing values in these columns. 

nulls.tail()

###### From the above output we see that there is a pattern with regards to missing values in that when a movie that has no rating more oftern than not has no votes, gross revenue or run time information. These features would important in creating a predictive model to determine the likelihood of getting a good rating for one's movie or predicting the gross revenue. However, since this project is solely for cleaning purposes, we will delete rows with missing values. 

# Delete rows with missing values

df = df.dropna()
df.head()


df.shape

# Standardize column names.

df.columns =df.columns.str.strip().str.lower()
df.rename(columns={'one-line': 'one_line'}, inplace = True)

# Check the data types for the columns

df.dtypes

###### From the above output we see that the 'gross' and 'votes' columns have object data types. These need to be changed to 'float' and 'integer' data types, respectively. The 'year' column must be changed to 'date' data type. 

# Change 'votes' column data type to integer. 

df['votes'] = df['votes'].str.replace(',', '')
df['votes'] = df['votes'].fillna(0)
df['votes'] = df['votes'].apply(np.int64)
df.dtypes


# Change the 'gross' column data type to integer.

# Check the 'gross' column to confirm that only the dollar is used as currency. 

df['gross'].unique()

# Change 'gross' column data type to float, remove the 'M' from each entry and change the 'gross' column name to 'gross_in_millions_of_$' to indicate currency and units of the gross. 

df['gross'] = df['gross'].str.replace('$', '').str.replace('M', '')
df['gross'] = round(df['gross'].apply(np.float), 0)
df['gross'] = df['gross'].fillna(0)
df = df.rename(columns={'gross': 'gross_in_millions_of_$'})

df.dtypes

# Remove braces from the 'year' column and split 'year' column into two columns.

df['year'] = df['year'].str.replace('(', '').str.replace(')', '')
df[['year_start', 'installment']] = df['year'].str.split(' ', n=1, expand=True)

# Convert None values in 'installment' column to zeros.

convert = lambda i : i or 0
df['installment'] = [convert(i) for i in df['installment']]
df.head()

# The years of release are in two columns, namely, 'year_released' and 'installment' so we need to place all of them in one column.

x = list()
for i,j in zip(df['year_start'], df['installment']):
    if len(i) == 4:
      x.append(i)
    else: x.append(j)
    
y = pd.Series( x[0:460], name = 'year_released', index = df.index.copy())

df = pd.concat([df, y.to_frame()], axis = 1)
df.head()

# Delete 'year', 'year_start' and 'installment' columns.

df.drop(columns = ['year', 'year_start', 'installment'], inplace = True)

df.dtypes

# Convert remaining column datatypess from 'object' to 'string' and the 'year_released' column to integer data type.

#df['movies'] = df['movies'].astype('string')
df['movies'] = df['movies'].astype('string')
df['genre'] = df['genre'].astype('string')
df['one_line'] = df['one_line'].astype('string')
df['stars'] = df['stars'].astype('string')
df['year_released'] = df['year_released'].apply(np.int)
df.dtypes

# Check contents of the 'movies' column. 

df['movies'].unique()

# Check content of 'genre' column. 

df['genre']

# Check entries in the 'stars' column. 

df['stars']

# Check contents of an individual 'stars' column entry

df['stars'][77]

# Split the 'stars' column into 'director' and 'stars' column.

df[['director', 'stars']] = df['stars'].str.split('|', n = 1, expand = True)

# Remove 'Stars:' and 'Director:' from the 'stars' and 'director' columns. 

df['stars'] = df['stars'].str.replace('Stars:', '')
df['director'] = df['director'].str.replace('Director:', '')

df.head()
